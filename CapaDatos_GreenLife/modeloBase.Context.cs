//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos_GreenLife
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GreenlifeEntities : DbContext
    {
        public GreenlifeEntities()
            : base("name=GreenlifeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Detalle> Detalle { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Plato> Plato { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int spAnularFactura(Nullable<int> idFactura)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAnularFactura", idFacturaParameter);
        }
    
        public virtual ObjectResult<spConsultarClientes_Result> spConsultarClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarClientes_Result>("spConsultarClientes");
        }
    
        public virtual ObjectResult<spConsultarClientesPorCedula_Result> spConsultarClientesPorCedula(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarClientesPorCedula_Result>("spConsultarClientesPorCedula", cedulaParameter);
        }
    
        public virtual ObjectResult<spConsultarClientesPorNombre_Result> spConsultarClientesPorNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarClientesPorNombre_Result>("spConsultarClientesPorNombre", nombreParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spConsultarFacturacionDiaria(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spConsultarFacturacionDiaria", fechaParameter);
        }
    
        public virtual ObjectResult<spConsultarFacturasDia_Result> spConsultarFacturasDia(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarFacturasDia_Result>("spConsultarFacturasDia", fechaParameter);
        }
    
        public virtual ObjectResult<spConsultarFacturasPorCliente_Result> spConsultarFacturasPorCliente(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarFacturasPorCliente_Result>("spConsultarFacturasPorCliente", idClienteParameter);
        }
    
        public virtual ObjectResult<spConsultarFacturasPorUsuario_Result> spConsultarFacturasPorUsuario(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarFacturasPorUsuario_Result>("spConsultarFacturasPorUsuario", idUsuarioParameter);
        }
    
        public virtual ObjectResult<spConsultarPlatos_Result> spConsultarPlatos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarPlatos_Result>("spConsultarPlatos");
        }
    
        public virtual ObjectResult<spConsultarPlatosPorNombre_Result> spConsultarPlatosPorNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarPlatosPorNombre_Result>("spConsultarPlatosPorNombre", nombreParameter);
        }
    
        public virtual ObjectResult<spConsultarPlatosPorTipo_Result> spConsultarPlatosPorTipo(string tipo)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarPlatosPorTipo_Result>("spConsultarPlatosPorTipo", tipoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spConsultarTotalFacturasDia(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spConsultarTotalFacturasDia", fechaParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spConsultarTotalFacturasMes(Nullable<int> mes)
        {
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spConsultarTotalFacturasMes", mesParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spConsultarTotalFacturasPorMetodoDia(Nullable<System.DateTime> fecha, string metodoPago)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var metodoPagoParameter = metodoPago != null ?
                new ObjectParameter("metodoPago", metodoPago) :
                new ObjectParameter("metodoPago", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spConsultarTotalFacturasPorMetodoDia", fechaParameter, metodoPagoParameter);
        }
    
        public virtual ObjectResult<spConsultarUsuarioPorNombre_Result> spConsultarUsuarioPorNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarUsuarioPorNombre_Result>("spConsultarUsuarioPorNombre", nombreParameter);
        }
    
        public virtual ObjectResult<spConsultarUsuarios_Result> spConsultarUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultarUsuarios_Result>("spConsultarUsuarios");
        }
    
        public virtual int spEliminarCliente(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarCliente", cedulaParameter);
        }
    
        public virtual int spEliminarPlato(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarPlato", idParameter);
        }
    
        public virtual int spEliminarUsuario(string usuario)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarUsuario", usuarioParameter);
        }
    
        public virtual int spInsertarCliente(string cedula, string nombre, string direccion, string telefono)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarCliente", cedulaParameter, nombreParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int spInsertarDetalle(Nullable<int> idFactura, Nullable<int> idPlato, Nullable<int> cantidad, Nullable<decimal> precio)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            var idPlatoParameter = idPlato.HasValue ?
                new ObjectParameter("idPlato", idPlato) :
                new ObjectParameter("idPlato", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarDetalle", idFacturaParameter, idPlatoParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int spInsertarFactura(Nullable<int> idUsuario, Nullable<int> idCliente, Nullable<System.DateTime> fecha, string metodoDePago, Nullable<decimal> subtotal, Nullable<decimal> iva, Nullable<decimal> total, Nullable<bool> validez)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("metodoDePago", metodoDePago) :
                new ObjectParameter("metodoDePago", typeof(string));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("subtotal", subtotal) :
                new ObjectParameter("subtotal", typeof(decimal));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("iva", iva) :
                new ObjectParameter("iva", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var validezParameter = validez.HasValue ?
                new ObjectParameter("validez", validez) :
                new ObjectParameter("validez", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarFactura", idUsuarioParameter, idClienteParameter, fechaParameter, metodoDePagoParameter, subtotalParameter, ivaParameter, totalParameter, validezParameter);
        }
    
        public virtual int spInsertarPlato(string nombre, Nullable<decimal> precio, string tipo, byte[] foto)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarPlato", nombreParameter, precioParameter, tipoParameter, fotoParameter);
        }
    
        public virtual int spInsertarUsuario(string usuario, string password, string nombre, Nullable<int> rol)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarUsuario", usuarioParameter, passwordParameter, nombreParameter, rolParameter);
        }
    
        public virtual ObjectResult<spLogin_Result> spLogin(string user, string password)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLogin_Result>("spLogin", userParameter, passwordParameter);
        }
    
        public virtual int spModificarCliente(Nullable<int> id, string cedulaNueva, string nombre, string direccion, string telefono)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var cedulaNuevaParameter = cedulaNueva != null ?
                new ObjectParameter("cedulaNueva", cedulaNueva) :
                new ObjectParameter("cedulaNueva", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModificarCliente", idParameter, cedulaNuevaParameter, nombreParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int spModificarPlato(Nullable<int> id, string nombre, Nullable<decimal> precio, string tipo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModificarPlato", idParameter, nombreParameter, precioParameter, tipoParameter);
        }
    
        public virtual int spModificarUsuario(Nullable<int> idUsuario, string usuario, string password, string nombre, Nullable<int> rol)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModificarUsuario", idUsuarioParameter, usuarioParameter, passwordParameter, nombreParameter, rolParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spConsultarUltimoIDFactura()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spConsultarUltimoIDFactura");
        }
    }
}
